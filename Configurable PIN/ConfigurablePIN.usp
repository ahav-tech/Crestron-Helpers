/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Programmer: AH
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Configurable PIN"
#HINT "PIN number for use with external storage"
// #DEFINE_CONSTANT
// #CATEGORY "" 
#CATEGORY "21" // Security
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
   Checks and stores PIN numbers (max number and max length = 10)
   Uses external storage for the PINs to allow use with configuration system (e.g. Json, xml, NVRAM?)
#HELP_END


#DEFINE_CONSTANT PinMaxLength 10
#DEFINE_CONSTANT NumStoredPins 10

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Key0, Key1, Key2, Key3, Key4, Key5, Key6, Key7, Key8, Key9;
digital_input _skip_;
DIGITAL_INPUT Enter, Backspace, Clear;
digital_input _skip_;
DIGITAL_INPUT Store[NumStoredPins];

string_input _skip_;
STRING_INPUT StoredPINs[NumStoredPins][PinMaxlength];
// BUFFER_INPUT 

DIGITAL_OUTPUT CorrectPulse, IncorrectPulse;
digital_output _skip_;
// ANALOG_OUTPUT 
STRING_OUTPUT DisplayEnteredPIN, DisplayEnteredPINStar;
string_output _skip_;
string_output _skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_;
STRING_OUTPUT PINtoStore[NumStoredPins];


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING _currentEnteredPin[PinMaxLength];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/



Function fnDisplayPin(string pin)
{
	integer i;  
	string starredString[PinMaxlength];
	
	
	for(i = 1 to len(pin))
	{
		starredString = starredString + "*";
	}
	
	DisplayEnteredPIN = pin;
	DisplayEnteredPINStar = starredString;
}

function fnStorePin(string pin, integer index)
{
  PINtoStore[index] = pin;
}

function fnPulseCorrect()
{
CorrectPulse = 1;
ProcessLogic();
CorrectPulse = 0;
}

function fnPulseIncorrect()
{
  IncorrectPulse = 1;
  ProcessLogic();
  IncorrectPulse = 0;
}

function fnAddKey(integer keyNum)
{
	if(len(_currentEnteredPin) < PinMaxLength)
	{
		_currentEnteredPin = _currentEnteredPin + itoa(keyNum);
	}
	else
	{
		_currentEnteredPin = itoa(keyNum);
	}
	
	fnDisplayPin(_currentEnteredPin);
}

function fnBackSpace(integer amount)
{
	if(len(_currentEnteredPin) >= amount)
	{
		_currentEnteredPin = left( _currentEnteredPin, (len(_currentEnteredPin) - amount) );
		fnDisplayPin(_currentEnteredPin);
	}
}

function fnClear()
{
	_currentEnteredPin = "";
	fnDisplayPin(_currentEnteredPin);
}

function fnCheckPinAgainstStored(string pin)
{
  integer i;
  integer isCorrect;

  isCorrect = 0;

  for(i = 1 to NumStoredPins)
  {
    if(len(StoredPINs[i]) > 0)
	{
		if(StoredPINs[i] = pin)
    	{
      		isCorrect = 1;
    	}
	}
  }

  if(isCorrect)
  {
    fnPulseCorrect();
  }
  else
  {
    fnPulseIncorrect();
  }
}

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Key0 { fnAddKey(0);}
PUSH Key1 { fnAddKey(1);}
PUSH Key2 { fnAddKey(2);}
PUSH Key3 { fnAddKey(3);}
PUSH Key4 { fnAddKey(4);}
PUSH Key5 { fnAddKey(5);}
PUSH Key6 { fnAddKey(6);}
PUSH Key7 { fnAddKey(7);}
PUSH Key8 { fnAddKey(8);}
PUSH Key9 { fnAddKey(9);}

PUSH Backspace { fnBackSpace(1); }

PUSH Clear { fnClear(); }

PUSH Enter { fnCheckPinAgainstStored(_currentEnteredPin); }

PUSH Store 
{ 
  integer i;
  i = GetLastModifiedArrayIndex();
  
  fnStorePin(_currentEnteredPin,i);
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	_currentEnteredPin = "";
	
	WaitForInitializationComplete();
	
	fnDisplayPin(_currentEnteredPin);
}


