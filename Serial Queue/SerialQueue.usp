/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Programmer: AH
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
	#SYMBOL_NAME "SerialQueue"
// #HINT ""
// #DEFINE_CONSTANT
	#CATEGORY "10" // Serial
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
	#DEFAULT_VOLATILE
	#ENABLE_STACK_CHECKING
	#ENABLE_TRACE
	#ENCODING_INHERIT_FROM_PARENT
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
   	This module is used to queue up serial commands to prevent flooding of devices. 
	An oscillator is to be use between 'QueueEvent' and 'ProcessQueue', with parameters
	set to define space between sent commands. The command will repeat the number of times 
	defined by 'MaxQueueRetries' until any sort of feedback is received.
#HELP_END

#DEFINE_CONSTANT QueueMax	80

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
STRING_INPUT CommandInput$[100];
STRING_INPUT FeedbackInput$[100];

ANALOG_INPUT MaxQueueRetries;

DIGITAL_INPUT QueueEvent;


DIGITAL_OUTPUT PROCESSQUEUE;

STRING_OUTPUT CommandOutput$;
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

INTEGER QueueHead;
INTEGER QueueTail;
INTEGER QueueState;
INTEGER QueueRetries;
STRING Queue[QueueMax][80];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function SendCmd (String CmdString)
{
    Queue[QueueTail] = CmdString;
    QueueTail = QueueTail + 1;
    IF (QueueTail > QueueMax)
    {
		QueueTail = 1;
	}
	
	PROCESSQUEUE = 1;	//start or continue processing the queue.
}

Function CheckQueueState()
{
	IF (QueueHead <> QueueTail)	//something is in the queue
	{
		IF (QueueState)	//queue is currently enabled
 		{
      		QueueState = 0;	//disable queue until response
			CommandOutput$ = Queue[QueueHead];
		}
		ELSE
		{
			CommandOutput$ = Queue[QueueHead];
		}
	}
	ELSE	//stop processing the queue
	{
		PROCESSQUEUE = 0;
	}           
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

CHANGE CommandInput$
{
	SendCmd(CommandInput$);
}

CHANGE FeedbackInput$
{
    //received comms.
	IF(LEN(FeedbackInput$) > 0)
	{
    	QueueState = 1;	//allow queue to continue.
		QueueHead = QueueHead + 1;
			IF (QueueHead > QueueMax)
			{
				QueueHead = 1;
			}
	}
}

CHANGE QueueEvent
{
	IF (QueueEvent = 1)	//rising edge of clock
	{
		IF (QueueState = 0)	//still no reply.
		{
			QueueRetries = QueueRetries + 1;
		}
		ELSE
		{
			QueueRetries = 0;
		}
		
		IF (QueueRetries < MaxQueueRetries)
		{
			CheckQueueState();
		}
		ELSE	//time to clear and restart the queue
		{
			QueueRetries = 0;
			QueueHead = 1;
			QueueTail = 1;
			QueueState = 1;
		}
	}
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    WaitForInitializationComplete();

    QueueHead = 1;
	QueueTail = 1;
	QueueState = 1;
	QueueRetries = 0;
	PROCESSQUEUE = 0;
}


